
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIGUALDIFERENTEleftMENORQUEMENORIGUALMAYORQUEMAYORIGUALleftSUMARESTAleftMULTIPLICACIONDIVISIONALARM_OFF ALARM_ON AND ASIGNACION BEGIN BOOL CADENA COMA COMILLADOBLE COMILLASIMPLE CORCHETE_A CORCHETE_B DIFERENTE DIVISION ELSE END FALSE FOR FROM FUN ID IF IGUAL IMPORT INT LIGHT_OFF LIGHT_ON LLAVE_A LLAVE_C MASMAS MAYORIGUAL MAYORQUE MENORIGUAL MENORQUE MENOSMENOS MOVE_TO MULTIPLICACION NOT NUMERO OR PARENTESIS_A PARENTESIS_B PUNTO PUNTOCOMA REAL REAL_LIT RESTA RETURN SENSOR_PIR START_RECORD STG STOP STOP_RECORD SUMA TRUE WAIT_MOTION WHILE programa : BEGIN bloque_codigo END  bloque_codigo : LLAVE_A lista_declaraciones LLAVE_C \n    lista_declaraciones : lista_declaraciones declaracion\n                        | lista_declaraciones si\n                        | lista_declaraciones mientras\n                        | lista_declaraciones for_loop\n                        | declaracion\n                        | si\n                        | mientras\n                        | for_loop\n     declaracion : tipo ID ASIGNACION expresion PUNTOCOMA  declaracion : tipo ID ASIGNACION expresion  declaracion : tipo ID ASIGNACION PUNTOCOMA  tipo : INT\n             | BOOL\n             | STG\n             | REAL \n    expresion : expresion SUMA expresion\n              | expresion RESTA expresion\n              | expresion MULTIPLICACION expresion\n              | expresion DIVISION expresion\n              | expresion MENORQUE expresion\n              | expresion MENORIGUAL expresion\n              | expresion MAYORQUE expresion\n              | expresion MAYORIGUAL expresion\n              | expresion IGUAL expresion\n              | expresion DIFERENTE expresion\n     \n    expresion : PARENTESIS_A expresion PARENTESIS_B\n              | NUMERO\n              | REAL\n              | CADENA\n              | TRUE\n              | FALSE\n    \n    si : IF PARENTESIS_A expresion PARENTESIS_B bloque_codigo\n       | IF PARENTESIS_A expresion PARENTESIS_B bloque_codigo ELSE bloque_codigo\n     mientras : WHILE PARENTESIS_A expresion PARENTESIS_B bloque_codigo \n    for_loop : FOR PARENTESIS_A for_init PUNTOCOMA for_condicion PUNTOCOMA for_actualizacion PARENTESIS_B bloque_codigo\n    \n    for_init : tipo ID ASIGNACION expresion\n             | ID ASIGNACION expresion\n     for_condicion : expresion \n    for_actualizacion : ID ASIGNACION expresion\n                      | ID MASMAS\n                      | ID MENOSMENOS\n     lista_declaraciones : MOVE_TO PARENTESIS_A NUMERO COMA NUMERO PARENTESIS_B PUNTOCOMA  lista_declaraciones : WAIT_MOTION PARENTESIS_A PARENTESIS_B PUNTOCOMA \n    lista_declaraciones : START_RECORD PARENTESIS_A PARENTESIS_B PUNTOCOMA\n                        | STOP_RECORD PARENTESIS_A PARENTESIS_B PUNTOCOMA\n    \n    lista_declaraciones : LIGHT_ON PUNTOCOMA\n                        | LIGHT_OFF PUNTOCOMA\n    \n    lista_declaraciones : ALARM_ON PUNTOCOMA\n                        | ALARM_OFF PUNTOCOMA\n     lista_declaraciones : STOP PUNTOCOMA '
    
_lr_action_items = {'BEGIN':([0,],[2,]),'$end':([1,5,],[0,-1,]),'LLAVE_A':([2,69,80,104,111,],[4,4,4,4,4,]),'END':([3,28,],[5,-2,]),'MOVE_TO':([4,],[11,]),'WAIT_MOTION':([4,],[12,]),'START_RECORD':([4,],[13,]),'STOP_RECORD':([4,],[14,]),'LIGHT_ON':([4,],[15,]),'LIGHT_OFF':([4,],[16,]),'ALARM_ON':([4,],[17,]),'ALARM_OFF':([4,],[18,]),'STOP':([4,],[19,]),'IF':([4,6,7,8,9,10,28,29,30,31,32,37,38,39,40,41,53,54,55,56,57,63,64,65,66,67,85,86,87,88,89,90,91,92,93,94,95,96,97,98,107,108,115,],[21,21,-7,-8,-9,-10,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-29,-30,-31,-32,-33,-45,-46,-47,-12,-13,-11,-28,-34,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-36,-44,-35,-37,]),'WHILE':([4,6,7,8,9,10,28,29,30,31,32,37,38,39,40,41,53,54,55,56,57,63,64,65,66,67,85,86,87,88,89,90,91,92,93,94,95,96,97,98,107,108,115,],[22,22,-7,-8,-9,-10,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-29,-30,-31,-32,-33,-45,-46,-47,-12,-13,-11,-28,-34,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-36,-44,-35,-37,]),'FOR':([4,6,7,8,9,10,28,29,30,31,32,37,38,39,40,41,53,54,55,56,57,63,64,65,66,67,85,86,87,88,89,90,91,92,93,94,95,96,97,98,107,108,115,],[23,23,-7,-8,-9,-10,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-29,-30,-31,-32,-33,-45,-46,-47,-12,-13,-11,-28,-34,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-36,-44,-35,-37,]),'INT':([4,6,7,8,9,10,28,29,30,31,32,37,38,39,40,41,45,53,54,55,56,57,63,64,65,66,67,85,86,87,88,89,90,91,92,93,94,95,96,97,98,107,108,115,],[24,24,-7,-8,-9,-10,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,24,-29,-30,-31,-32,-33,-45,-46,-47,-12,-13,-11,-28,-34,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-36,-44,-35,-37,]),'BOOL':([4,6,7,8,9,10,28,29,30,31,32,37,38,39,40,41,45,53,54,55,56,57,63,64,65,66,67,85,86,87,88,89,90,91,92,93,94,95,96,97,98,107,108,115,],[25,25,-7,-8,-9,-10,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,25,-29,-30,-31,-32,-33,-45,-46,-47,-12,-13,-11,-28,-34,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-36,-44,-35,-37,]),'STG':([4,6,7,8,9,10,28,29,30,31,32,37,38,39,40,41,45,53,54,55,56,57,63,64,65,66,67,85,86,87,88,89,90,91,92,93,94,95,96,97,98,107,108,115,],[26,26,-7,-8,-9,-10,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,26,-29,-30,-31,-32,-33,-45,-46,-47,-12,-13,-11,-28,-34,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-36,-44,-35,-37,]),'REAL':([4,6,7,8,9,10,28,29,30,31,32,37,38,39,40,41,43,44,45,50,51,53,54,55,56,57,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,81,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,107,108,112,115,],[27,27,-7,-8,-9,-10,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,54,54,27,54,54,-29,-30,-31,-32,-33,-45,-46,-47,-12,-13,54,54,54,54,54,54,54,54,54,54,54,54,-11,-28,-34,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-36,54,-44,-35,54,-37,]),'LLAVE_C':([6,7,8,9,10,28,29,30,31,32,37,38,39,40,41,53,54,55,56,57,63,64,65,66,67,85,86,87,88,89,90,91,92,93,94,95,96,97,98,107,108,115,],[28,-7,-8,-9,-10,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-29,-30,-31,-32,-33,-45,-46,-47,-12,-13,-11,-28,-34,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-36,-44,-35,-37,]),'PARENTESIS_A':([11,12,13,14,21,22,23,43,44,50,51,70,71,72,73,74,75,76,77,78,79,81,83,101,112,],[33,34,35,36,43,44,45,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'PUNTOCOMA':([15,16,17,18,19,47,48,49,50,53,54,55,56,57,59,66,86,88,89,90,91,92,93,94,95,96,97,99,100,102,103,106,],[37,38,39,40,41,63,64,65,67,-29,-30,-31,-32,-33,81,85,-28,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,105,-40,-39,107,-38,]),'ID':([20,24,25,26,27,45,60,105,],[42,-14,-15,-16,-17,61,82,110,]),'ELSE':([28,87,],[-2,104,]),'NUMERO':([33,43,44,50,51,62,70,71,72,73,74,75,76,77,78,79,81,83,101,112,],[46,53,53,53,53,84,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'PARENTESIS_B':([34,35,36,52,53,54,55,56,57,58,68,84,86,88,89,90,91,92,93,94,95,96,97,109,113,114,116,],[47,48,49,69,-29,-30,-31,-32,-33,80,86,103,-28,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,111,-42,-43,-41,]),'ASIGNACION':([42,61,82,110,],[50,83,101,112,]),'CADENA':([43,44,50,51,70,71,72,73,74,75,76,77,78,79,81,83,101,112,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'TRUE':([43,44,50,51,70,71,72,73,74,75,76,77,78,79,81,83,101,112,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'FALSE':([43,44,50,51,70,71,72,73,74,75,76,77,78,79,81,83,101,112,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'COMA':([46,],[62,]),'SUMA':([52,53,54,55,56,57,58,66,68,86,88,89,90,91,92,93,94,95,96,97,100,102,106,116,],[70,-29,-30,-31,-32,-33,70,70,70,-28,-18,-19,-20,-21,70,70,70,70,70,70,70,70,70,70,]),'RESTA':([52,53,54,55,56,57,58,66,68,86,88,89,90,91,92,93,94,95,96,97,100,102,106,116,],[71,-29,-30,-31,-32,-33,71,71,71,-28,-18,-19,-20,-21,71,71,71,71,71,71,71,71,71,71,]),'MULTIPLICACION':([52,53,54,55,56,57,58,66,68,86,88,89,90,91,92,93,94,95,96,97,100,102,106,116,],[72,-29,-30,-31,-32,-33,72,72,72,-28,72,72,-20,-21,72,72,72,72,72,72,72,72,72,72,]),'DIVISION':([52,53,54,55,56,57,58,66,68,86,88,89,90,91,92,93,94,95,96,97,100,102,106,116,],[73,-29,-30,-31,-32,-33,73,73,73,-28,73,73,-20,-21,73,73,73,73,73,73,73,73,73,73,]),'MENORQUE':([52,53,54,55,56,57,58,66,68,86,88,89,90,91,92,93,94,95,96,97,100,102,106,116,],[74,-29,-30,-31,-32,-33,74,74,74,-28,-18,-19,-20,-21,-22,-23,-24,-25,74,74,74,74,74,74,]),'MENORIGUAL':([52,53,54,55,56,57,58,66,68,86,88,89,90,91,92,93,94,95,96,97,100,102,106,116,],[75,-29,-30,-31,-32,-33,75,75,75,-28,-18,-19,-20,-21,-22,-23,-24,-25,75,75,75,75,75,75,]),'MAYORQUE':([52,53,54,55,56,57,58,66,68,86,88,89,90,91,92,93,94,95,96,97,100,102,106,116,],[76,-29,-30,-31,-32,-33,76,76,76,-28,-18,-19,-20,-21,-22,-23,-24,-25,76,76,76,76,76,76,]),'MAYORIGUAL':([52,53,54,55,56,57,58,66,68,86,88,89,90,91,92,93,94,95,96,97,100,102,106,116,],[77,-29,-30,-31,-32,-33,77,77,77,-28,-18,-19,-20,-21,-22,-23,-24,-25,77,77,77,77,77,77,]),'IGUAL':([52,53,54,55,56,57,58,66,68,86,88,89,90,91,92,93,94,95,96,97,100,102,106,116,],[78,-29,-30,-31,-32,-33,78,78,78,-28,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,78,78,78,78,]),'DIFERENTE':([52,53,54,55,56,57,58,66,68,86,88,89,90,91,92,93,94,95,96,97,100,102,106,116,],[79,-29,-30,-31,-32,-33,79,79,79,-28,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,79,79,79,79,]),'MASMAS':([110,],[113,]),'MENOSMENOS':([110,],[114,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'bloque_codigo':([2,69,80,104,111,],[3,87,98,108,115,]),'lista_declaraciones':([4,],[6,]),'declaracion':([4,6,],[7,29,]),'si':([4,6,],[8,30,]),'mientras':([4,6,],[9,31,]),'for_loop':([4,6,],[10,32,]),'tipo':([4,6,45,],[20,20,60,]),'expresion':([43,44,50,51,70,71,72,73,74,75,76,77,78,79,81,83,101,112,],[52,58,66,68,88,89,90,91,92,93,94,95,96,97,100,102,106,116,]),'for_init':([45,],[59,]),'for_condicion':([81,],[99,]),'for_actualizacion':([105,],[109,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> BEGIN bloque_codigo END','programa',3,'p_programa','AnalizadorSintactico.py',23),
  ('bloque_codigo -> LLAVE_A lista_declaraciones LLAVE_C','bloque_codigo',3,'p_bloque_codigo','AnalizadorSintactico.py',27),
  ('lista_declaraciones -> lista_declaraciones declaracion','lista_declaraciones',2,'p_lista_declaraciones','AnalizadorSintactico.py',32),
  ('lista_declaraciones -> lista_declaraciones si','lista_declaraciones',2,'p_lista_declaraciones','AnalizadorSintactico.py',33),
  ('lista_declaraciones -> lista_declaraciones mientras','lista_declaraciones',2,'p_lista_declaraciones','AnalizadorSintactico.py',34),
  ('lista_declaraciones -> lista_declaraciones for_loop','lista_declaraciones',2,'p_lista_declaraciones','AnalizadorSintactico.py',35),
  ('lista_declaraciones -> declaracion','lista_declaraciones',1,'p_lista_declaraciones','AnalizadorSintactico.py',36),
  ('lista_declaraciones -> si','lista_declaraciones',1,'p_lista_declaraciones','AnalizadorSintactico.py',37),
  ('lista_declaraciones -> mientras','lista_declaraciones',1,'p_lista_declaraciones','AnalizadorSintactico.py',38),
  ('lista_declaraciones -> for_loop','lista_declaraciones',1,'p_lista_declaraciones','AnalizadorSintactico.py',39),
  ('declaracion -> tipo ID ASIGNACION expresion PUNTOCOMA','declaracion',5,'p_declaracion','AnalizadorSintactico.py',47),
  ('declaracion -> tipo ID ASIGNACION expresion','declaracion',4,'p_declaracion_error1','AnalizadorSintactico.py',51),
  ('declaracion -> tipo ID ASIGNACION PUNTOCOMA','declaracion',4,'p_declaracion_error2','AnalizadorSintactico.py',55),
  ('tipo -> INT','tipo',1,'p_tipo','AnalizadorSintactico.py',59),
  ('tipo -> BOOL','tipo',1,'p_tipo','AnalizadorSintactico.py',60),
  ('tipo -> STG','tipo',1,'p_tipo','AnalizadorSintactico.py',61),
  ('tipo -> REAL','tipo',1,'p_tipo','AnalizadorSintactico.py',62),
  ('expresion -> expresion SUMA expresion','expresion',3,'p_expresion_binaria','AnalizadorSintactico.py',68),
  ('expresion -> expresion RESTA expresion','expresion',3,'p_expresion_binaria','AnalizadorSintactico.py',69),
  ('expresion -> expresion MULTIPLICACION expresion','expresion',3,'p_expresion_binaria','AnalizadorSintactico.py',70),
  ('expresion -> expresion DIVISION expresion','expresion',3,'p_expresion_binaria','AnalizadorSintactico.py',71),
  ('expresion -> expresion MENORQUE expresion','expresion',3,'p_expresion_binaria','AnalizadorSintactico.py',72),
  ('expresion -> expresion MENORIGUAL expresion','expresion',3,'p_expresion_binaria','AnalizadorSintactico.py',73),
  ('expresion -> expresion MAYORQUE expresion','expresion',3,'p_expresion_binaria','AnalizadorSintactico.py',74),
  ('expresion -> expresion MAYORIGUAL expresion','expresion',3,'p_expresion_binaria','AnalizadorSintactico.py',75),
  ('expresion -> expresion IGUAL expresion','expresion',3,'p_expresion_binaria','AnalizadorSintactico.py',76),
  ('expresion -> expresion DIFERENTE expresion','expresion',3,'p_expresion_binaria','AnalizadorSintactico.py',77),
  ('expresion -> PARENTESIS_A expresion PARENTESIS_B','expresion',3,'p_expresion_valores','AnalizadorSintactico.py',83),
  ('expresion -> NUMERO','expresion',1,'p_expresion_valores','AnalizadorSintactico.py',84),
  ('expresion -> REAL','expresion',1,'p_expresion_valores','AnalizadorSintactico.py',85),
  ('expresion -> CADENA','expresion',1,'p_expresion_valores','AnalizadorSintactico.py',86),
  ('expresion -> TRUE','expresion',1,'p_expresion_valores','AnalizadorSintactico.py',87),
  ('expresion -> FALSE','expresion',1,'p_expresion_valores','AnalizadorSintactico.py',88),
  ('si -> IF PARENTESIS_A expresion PARENTESIS_B bloque_codigo','si',5,'p_si','AnalizadorSintactico.py',97),
  ('si -> IF PARENTESIS_A expresion PARENTESIS_B bloque_codigo ELSE bloque_codigo','si',7,'p_si','AnalizadorSintactico.py',98),
  ('mientras -> WHILE PARENTESIS_A expresion PARENTESIS_B bloque_codigo','mientras',5,'p_mientras','AnalizadorSintactico.py',106),
  ('for_loop -> FOR PARENTESIS_A for_init PUNTOCOMA for_condicion PUNTOCOMA for_actualizacion PARENTESIS_B bloque_codigo','for_loop',9,'p_for_loop','AnalizadorSintactico.py',111),
  ('for_init -> tipo ID ASIGNACION expresion','for_init',4,'p_for_init','AnalizadorSintactico.py',117),
  ('for_init -> ID ASIGNACION expresion','for_init',3,'p_for_init','AnalizadorSintactico.py',118),
  ('for_condicion -> expresion','for_condicion',1,'p_for_condicion','AnalizadorSintactico.py',126),
  ('for_actualizacion -> ID ASIGNACION expresion','for_actualizacion',3,'p_for_actualizacion','AnalizadorSintactico.py',131),
  ('for_actualizacion -> ID MASMAS','for_actualizacion',2,'p_for_actualizacion','AnalizadorSintactico.py',132),
  ('for_actualizacion -> ID MENOSMENOS','for_actualizacion',2,'p_for_actualizacion','AnalizadorSintactico.py',133),
  ('lista_declaraciones -> MOVE_TO PARENTESIS_A NUMERO COMA NUMERO PARENTESIS_B PUNTOCOMA','lista_declaraciones',7,'p_comando_movimiento','AnalizadorSintactico.py',143),
  ('lista_declaraciones -> WAIT_MOTION PARENTESIS_A PARENTESIS_B PUNTOCOMA','lista_declaraciones',4,'p_comando_espera','AnalizadorSintactico.py',147),
  ('lista_declaraciones -> START_RECORD PARENTESIS_A PARENTESIS_B PUNTOCOMA','lista_declaraciones',4,'p_comando_grabacion','AnalizadorSintactico.py',152),
  ('lista_declaraciones -> STOP_RECORD PARENTESIS_A PARENTESIS_B PUNTOCOMA','lista_declaraciones',4,'p_comando_grabacion','AnalizadorSintactico.py',153),
  ('lista_declaraciones -> LIGHT_ON PUNTOCOMA','lista_declaraciones',2,'p_comando_luz','AnalizadorSintactico.py',159),
  ('lista_declaraciones -> LIGHT_OFF PUNTOCOMA','lista_declaraciones',2,'p_comando_luz','AnalizadorSintactico.py',160),
  ('lista_declaraciones -> ALARM_ON PUNTOCOMA','lista_declaraciones',2,'p_comando_alarma','AnalizadorSintactico.py',166),
  ('lista_declaraciones -> ALARM_OFF PUNTOCOMA','lista_declaraciones',2,'p_comando_alarma','AnalizadorSintactico.py',167),
  ('lista_declaraciones -> STOP PUNTOCOMA','lista_declaraciones',2,'p_comando_stop','AnalizadorSintactico.py',172),
]
